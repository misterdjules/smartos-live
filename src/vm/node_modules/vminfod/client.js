/*
 * Copyright 2015, Joyent, Inc.
 *
 * Vminfod Client and EventStream class
 */

var http = require('http');
var stream = require('stream');
var util = require('util');

var assert = require('/usr/node/node_modules/assert-plus.js');
var LineStream = require('/usr/node/node_modules/linestream.js');

module.exports = VminfodClient;
module.exports.VminfodClient = VminfodClient;
module.exports.VminfodStream = VminfodStream;

/*
 * VminfodClient class
 */
function VminfodClient(opts) {
    var self = this;

    opts = opts || {};
    self.vc_host = opts.host || '127.0.0.1';
    self.vc_port = opts.port || 9090;
}

/*
 * Perform a GET request to the Vminfod daemon.
 *
 * @param {Object|String} opts - options to pass to http.request, if this is a
 *                               string it is used as opts.path (the endpoint)
 * @param {Function} cb - callback of signature cb(err, data)
 *   - err - any possible error, including non-200 statusCode or failure to
 *           parse JSON response
 *   - data - the JSON.parse'd data returned from the server
 * @return {HTTPRequest} req - the HTTP request object
 */
VminfodClient.prototype.get = function get(opts, cb) {
    var self = this;

    if (typeof (opts) === 'string')
        opts = {path: opts};
    assert.object(opts, 'opts');

    var reqOpts = {
        host: self.vc_host,
        port: self.vc_port,
        method: 'GET'
    };
    Object.keys(opts).forEach(function (key) {
        reqOpts[key] = opts[key];
    });

    var req = http.request(reqOpts, function (res) {
        if (res.statusCode !== 200) {
            var err = new Error('bad statusCode: ' + res.statusCode);
            err.code = res.statusCode;
            cb(err);
            return;
        }

        res.setEncoding('utf8');
        var body = '';
        res.on('data', function (data) {
            body += data;
        });
        res.on('end', function () {
            try {
                var d = JSON.parse(body);
                cb(null, d);
            } catch (e) {
                cb(e);
            }
        });
    });
    req.on('error', function (e) {
        cb(e);
        req.destroy();
    });
    req.end();
    return req;
};

/*
 * shortcuts for common endpoints, eqivalent to:
 *   get('/status', cb), get('/vms', cb), etc.
 */
['status', 'vms', 'data'].forEach(function (s) {
    VminfodClient.prototype[s] = function (opts, cb) {
        if (typeof (opts) === 'function') {
            cb = opts;
            opts = {};
        }
        opts.path = '/' + s;
        return this.get(opts, cb);
    };
});

/*
 * Get a information for a specific vm given the zonename
 *
 * @param {String} zonename - the zonename (UUID most likely)
 * @param {Function} cb - same signature and usage as .get()
 */
VminfodClient.prototype.vm = function vm(zonename, cb) {
    var endpoint = '/vms/' + encodeURIComponent(zonename);
    return this.get(endpoint, cb);
};

/*
 * Return a new VminfodStream using the options
 * given to create this VminfodClient
 */
VminfodClient.prototype.createEventStream =
    function createEventStream(opts) {
    opts = opts || {};
    opts.host = this.vc_host || opts.host;
    opts.port = this.vc_port || opts.port;
    return new VminfodStream(opts);
};

/*
 * Create a new vminfod stream by creating a persistent HTTP request to vminfod
 *
 */
function VminfodStream(opts) {
    var self = this;

    // become a transform stream
    stream.Transform.call(self, {objectMode: true});

    // process opts
    opts = opts || {};
    self.vs_host = opts.host || '127.0.0.1';
    self.vs_port = opts.port || 9090;
    self.start();
}
util.inherits(VminfodStream, stream.Transform);

/*
 * start the stream by opening a persistent HTTP connection
 */
VminfodStream.prototype.start = function start(opts) {
    var self = this;

    opts = opts || {};

    assert.ok(!self.vs_req, 'VminfodStream already started');

    var reqOpts = {
        host: self.vs_host,
        port: self.vs_port,
        method: 'GET',
        path: '/events'
    };
    Object.keys(opts).forEach(function (key) {
        reqOpts[key] = opts[key];
    });

    self.vs_req = http.request(reqOpts, function (res) {
        var e;
        if (res.statusCode !== 200) {
            e = new Error('invalid statusCode: ' + res.statusCode);
            e.code = res.statusCode;
            self.emit('error', e);
            return;
        }

        var ls = new LineStream();
        res.pipe(ls).pipe(self);
        res.on('end', function () {
            if (self.vs_req) {
                e = new Error('VminfodStream ended prematurely');
                self.emit('error', e);
                return;
            }
        });
    });
    self.vs_req.setTimeout(0);
    self.vs_req.end();

    return self.vs_req;
};

/*
 * the transform method to process http body-by-line
 */
VminfodStream.prototype._transform = function _transform(chunk, encoding, cb) {
    var line = chunk.toString('utf8');
    var ev;
    try {
        ev = JSON.parse(line);
    } catch (e) {
        // any JSON parse failure is a fatal error
        this.vs_logger.error({err: e, line: line},
            'failed to parse output line');
        this._abort();
        return;
    }

    this.push(ev);
    cb();
};

/*
 * cleanly stop the VminfodStream by destroying the request
 */
VminfodStream.prototype.stop = function stop() {
    this.vs_req.destroy();
    this.vs_req = null;
};

/*
 * same as above, but emit an error
 */
VminfodStream.prototype._abort = function _abort() {
    this.stop();
    var e = new Error('VminfodStream aborted');
    this.emit('error', e);
};

/*
 * if called directly just hook a vminfo stream to stdout
 */
if (require.main === module) {
    var vs = new VminfodStream();
    vs.on('readable', function () {
        var ev;
        while ((ev = vs.read()) !== null) {
            console.log(JSON.stringify(ev, null, 2));
        }
    });
}
