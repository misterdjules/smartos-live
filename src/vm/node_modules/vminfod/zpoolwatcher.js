/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright 2015, Joyent, Inc.
 *
 */

var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var util = require('util');

var SyseventStream = require('sysevent-stream');

module.exports = ZpoolWatcher;
module.exports.ZpoolWatcher = ZpoolWatcher;
function ZpoolWatcher(options) {
    var self = this;

    self.options = options;
    assert(options.log, 'no logger passed to ZpoolWatcher()');
    self.log = options.log;

    // create a Sysevent stream
    var opts = {
        logger: self.log,
        class: 'EC_zfs',
        subclasses: ['ESC_ZFS_history_event']
    };

    self.se = new SyseventStream(opts);
    self.se.on('readable', function () {
        var ev;
        while ((ev = self.se.read()) !== null)
            self._handle_event(ev);
    });
}
util.inherits(ZpoolWatcher, EventEmitter);

/*
 * called internally whenever a new sysevent is received -
 * this method is responsible for constructing an object to emit
 * based on the sysevent received.
 */
ZpoolWatcher.prototype._handle_event = function (ev) {
    var self = this;

    // object to be emitted
    var o = {};

    // ev is a new sysevent record
    // first, we try to extract the timestamp which consequently
    // acts as a way to verify the sysevent is in the correct format
    var ts;
    try {
        ts = ev.data.history_record['history time'];
    } catch (e) {
        self.log.fatal({err: e, ev: ev},
            'unknown sysevent record format for ZFS');
    }
    o.timestamp = ts;
    o.pool = ev.data.pool_name;

    // parse the "history command" line
    // ex: "zfs destroy zones/foobar"
    // or: "zfs set atime=on zones/foobar"

    // 1. chop off "zfs "
    var line = ev.data.history_record['history command'].substr(4);

    // 2. extract the action: ie. "set", "destroy", "create", etc.
    var action = line.split(' ')[0];

    // 3. extract "extra" parameters.  "extra"s are defined as any key=value
    // pair.  Since ZFS doesn't allow the '=' character in a dataset name, we
    // simply go through argument by argument in the line (which are separated
    // by spaces) and look for the '=' character.
    //
    // For example:
    //
    // "zfs set atime=off sync=always zones/foo bar baz"
    // The "extra" will be {atime: 'off', sync: 'always'}, and the dataset name
    // is "zones/foo bar baz"
    //
    // start by chopping off the "<action> " part of the string
    var s = line.substr(action.length + 1);
    var extra = {};
    var dsname;
    while (s.length > 0) {
        // extract everything up to the first ' ' character, or until
        // the end of the string (if we are on the last argument)
        var i = s.indexOf(' ');
        if (i < 0)
            i = s.length;
        var arg = s.substr(0, i);

        // look for a '=' character to see if we are processing any "extra"s
        var j = arg.indexOf('=');
        if (j >= 0) {
            // extra
            var key = arg.substr(0, j);
            var value = arg.substr(j + 1);
            extra[key] = value;
        } else {
            // part of the dataset name, save the entire string (that is
            // remaining) and break out of the loop - we are done.
            dsname = s;
            break;
        }

        // shift the arg from the string and keep going
        s = s.substr(i + 1);
    }

    o.extra = extra;
    o.dsname = dsname;
    o.action = action;

    self.log.debug({o: o}, 'emitting ZpoolWatcher event');
    self.emit(o.action, o);
    self.emit('all', o);
};

ZpoolWatcher.prototype.shutdown = function ()
{
    this.se.stop();
};
